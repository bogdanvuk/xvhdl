grammar rs.demsys.vhdl.Vhdl hidden(WS, SL_COMMENT) 

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate vhdl "http://www.demsys.rs/vhdl/Vhdl"

DesignFile :
	e=Expression
//		(ContextItems+=ContextItem)*
//	LibraryUnits+=LibraryUnit*
	;
UseClause
  : //'use' importedNamespace+=VhdlName ( ',' importedNamespace+=VhdlName )* ';'
  'use' (lib=Library) '.' importedNamespace = QualifiedNameWithWildcard ';'
  ;

Library:
	custom_lib=[LibraryClause]
	| builtin_lib=BuiltinLibs
;

LibraryClause
  : /* 'library' library_names+=IDENTIFIER (',' library_names+=IDENTIFIER)* ';' */
  	'library' name=ID ';'
  ;
  
enum BuiltinLibs:
	WORK='work'
;

ContextItem
  : LibraryClause
  | UseClause
  ;

LibraryUnit
  : Entity
//  	| Architecture
//  | primary_unit
  ;
  
Entity returns Entity: 
  'entity' name = IdentifierName 'is' 
//      ( generic = Generics )?
//      ( port = Ports )?
//      ( declaration += EntityDeclarativeItem )*
    ( 'begin' 
//      ( statement += EntityStatement )*
    )?
    'end' ( 'entity' )? ( Identifier )? ';'
;

Ports: 
  'port' '(' declaration += PortDeclaration ( ';' declaration += PortDeclaration )* ')' ';'
;

PortDeclaration: 
    InterfaceSignalDeclaration
;

NullStatement :
    ( label = Identifier ':' )? expression = NullExpression ';'
;

SignalDeclaration :
  'signal' name = ID ':'
  type = SubtypeIndication ( kind = SignalKind )?  ( ':=' initial = Expression )? ';'
;

VariableDeclaration:
  ( ( shared ?= 'shared' ) )? 'variable' name = ID 
    ':' type = SubtypeIndication ( ':=' initial = Expression )? ';'
;

ConstantDeclaration:
  'constant' name = ID ':' type = SubtypeIndication
    ( ':=' initial = Expression )? ';'
;
  
InterfaceSignalDeclaration:
  ('signal')? name = ID ':' ( mode = Mode )?
  type = SubtypeIndication ( kind = SignalKind )?  ( ':=' initial = Expression )?
;

InterfaceVariableDeclaration:
  ( 'variable' )? name = ID ':' ( mode = Mode )?
   type = SubtypeIndication  ( ':=' initial = Expression )?
;

InterfaceConstantDeclaration:
  ( 'constant' )?  name = ID ':' ( 'in' )?
   type = SubtypeIndication  ( ':=' initial = Expression )?
;

SequentialStatement:
    WaitStatement
//  | AssertionStatement
//  | ReportStatement
//  | IfStatement
//  | CaseStatement
  | LoopStatement
//  | NextStatement
//  | ExitStatement
//  | ReturnStatement
//  | NullStatement
//  | BreakStatement
//  | ProcedureCallStatement
//  | VariableAssignmentStatement
//  | SequentialSignalAssignmentStatement
;

WaitStatement:
    ( label = Identifier ':' )? 'wait' ( 'on' sensitivity = MultiName )? 
    ( 'until' until = Expression )? ( 'for' time = Expression )? ';'
;

/*
 * [ label: ] loop
 *                  sequence-of-statements -- use exit statement to get out
 *             end loop [ label ] ;
 * 
 *  [ label: ] for variable in range loop
 *                  sequence-of-statements
 *             end loop [ label ] ;
 * 
 *  [ label: ] while  condition  loop
 *                  sequence-of-statements
 *             end loop [ label ] ;
 */
LoopStatement:
    ( label = Identifier ':' )? ( iteration = IterationScheme )?
    'loop'
    ( statement += SequentialStatement )* 
    'end' 'loop' ( Identifier )? ';'
  ;

IterationScheme:
    WhileIterationScheme
  | ForIterationScheme
;

WhileIterationScheme:
  'while' condition = Expression
;

ForIterationScheme:
  'for' variable = Identifier 'in' in = DiscreteRange
;

Range returns Expression:
  SimpleExpression ({RangeExpression.left=current} direction = RangeDirection right = SimpleExpression)? 
;

/*
 * discrete_range = discrete_subtype_indication
 *	              | range
 */
DiscreteRange returns Expression:
    RangeSpecification
//  | SubtypeIndication
;

RangeSpecification:
  =>(left = SimpleExpression direction = RangeDirection) right = SimpleExpression
;

/*
 * NAME_PATTERN (NAME_PATTERN)? = [ resolution_indication ] type_mark [ constraint ].
 */
SubtypeIndication:
    name = Name mark = Name (constraint = Constraint)? ('tolerance' tolerance = Expression ('across' across = Expression 'through')? )?
  | => (mark = Name constraint = Constraint) ('tolerance' tolerance = Expression ('across' across = Expression 'through')? )?
  | => (mark = Name 'tolerance') tolerance = Expression ('across' across = Expression 'through')?
  | Name
;

Constraint returns Expression:
    RangeConstraint
  | IndexConstraint
;

RangeConstraint returns Expression:
  'range' Range
;

IndexConstraint returns Expression:
   '(' DiscreteRange ({MultiExpression.expression+=current} (',' expression += DiscreteRange )+ )? ')'
;

Expression:
	ID
;

LogicalExpression returns Expression:
  Relation ({LogicalExpression.left=current} operator=LogicalOperator right=Relation)*
;

Relation returns Expression:
  ShiftExpression ({RelationalExpression.left=current} operator = RelationalOperator right = ShiftExpression)?
;

ShiftExpression returns Expression: 
  SimpleExpression ({ShiftExpression.left=current} operator=ShiftOperator right=SimpleExpression)?
;
SimpleExpression returns Expression: 
    TermExpression ({AddingExpression.left=current} operator = AddingOperator right = TermExpression)*
//  | SignTermExpression ({expression::AddingExpression.left=current} operator = AddingOperator right = TermExpression)*
;
//
//SignTermExpression returns Expression:
//  SignFactor ({expression::MultiplyingExpression.left=current} operator = MultiplyingOperator right = Factor)*
//;
//
TermExpression returns Expression:
  Factor ({MultiplyingExpression.left=current} operator = MultiplyingOperator right = Factor)*
;

Factor returns Expression: 
    Primary ({Factor.left=current} '**' right = Primary) ?
  | UnaryExpression
;

UnaryExpression returns Expression:
  unary_operator = UnaryOperator expression = Primary
;

//SignFactor returns Expression: 
//    SignPrimary ({expression::PowerExpression.left=current} '**' right = Primary) ?
//  | SignUnaryExpression
//;
//
//SignUnaryExpression returns Expression:
//  sign = Sign expression = UnaryExpression
//;
//
//SignPrimary returns Expression:
//  sign = Sign expression = Primary	
//;

Primary returns Expression:
	NameExpression
//    AllocatorExpression
//  | NameExpression
//  | NullExpression
//  | BitStringName
//  | CharacterName
  | ValueExpression
//  | Aggregate
;

NullExpression:
  'null'
;

ValueExpression: 
    {UnitValueExpression} value = ABSTRACT_LITERAL unit = Name
  | {ValueExpression} value = ABSTRACT_LITERAL
;

MultiName:
    Name ({NameList.name += current} (',' name += Name )+ )?
;

Name returns Name:
  NamePrefix ( {NameExpression.element+=current} (element += NameSuffix)+ ) ?
;

NameExpression returns Expression:
    {NameExpression} element += NamePrefix (element += NameSuffix)+
  | NamePrefixExpression
;

NamePrefix returns Name:
    IdentifierName
  | StringName
  | All
  | Others
;

NamePrefixExpression returns Expression:
    IdentifierName
  | StringName
  | All
  | Others
;

/* 
 * prefixed operator:
 *   SelectedName: prefix = Prefix '.' suffix = Suffix
 *   AttributeName: prefix = Prefix (signature = Signature )? '\'' AttributeDesignator ( '(' expression = Expression ')' )?	
 *   IndexedName: prefix = Prefix '(' index += Expression ( ',' index += Expression )* ')'
 *   SliceName: prefix = Prefix '(' range = DiscreteRange ')'
 *   TypeQualificationName: prefix = Prefix ''' '(' expression = Expression ') 
 */
NameSuffix returns Name:
    SelectedName
  | AttributeName
//  | Aggregate
//  | SliceName
//  | TypeQualification
;

StringName:
	value = STRING
;

CharacterName:
	value = CHAR
;

IdentifierName:
	value = Identifier
;

SelectedName returns Name:
  '.' (
      IdentifierName
    | CharacterName
    | StringName
    | All
  )
;

All:
  'all'
;

Others:
  'others'
;

Unaffected:
  'unaffected'
;

AttributeName:
  {AttributeExpression} (signature = Signature )? value = ATTRIBUTE
;

Signature returns Signature:
  {Signature}
    '[' ( parameter += Name ( ',' parameter += Name )* )? ( 'return' return = Name )? ']'
;

enum SignalKind :
    REGISTER = 'register' 
  | BUS      = 'bus'
;

enum RangeDirection :
    TO     = 'to'
  | DOWNTO = 'downto'
;

enum Mode :
    IN      = 'in'
  | OUT     = 'out'
  | INOUT   = 'inout'
  | BUFFER  = 'buffer'
  | LINKAGE = 'linkage'
;

enum UnaryOperator :
    ABS = 'abs'
  | NOT = 'not'
;

enum MultiplyingOperator :
    MUL = '*'
  | DIV = '/'
  | MOD = 'mod'
  | REM = 'rem'
;

enum ShiftOperator :
    SLL = 'sll'
  | SRL = 'srl'
  | SLA = 'sla'
  | SRA = 'sra'
  | ROL = 'rol'
  | ROR = 'ror'
;

enum RelationalOperator :
    EQ          = '='
  | NEQ         = '/='
  | LOWERTHAN   = '<'
  | LE          = '<='
  | GREATERTHAN = '>'
  | GE          = '>='
;

enum LogicalOperator :
    AND  = 'and'
  | OR   = 'or'
  | NAND = 'nand'
  | NOR  = 'nor'
  | XOR  = 'xor'
  | XNOR = 'xnor'
;

enum AddingOperator :
    PLUS      = '+'
  | MINUS     = '-'
  | AMPERSAND = '&'
;

enum Sign :
    PLUS  = '+'
  | MINUS = '-'
;

enum Purity :
    PURE   = 'pure'
  | IMPURE = 'impure'
;

enum EntityClass :
    ENTITY        = 'entity'
  | ARCHITECTURE  = 'architecture'
  | CONFIGURATION = 'configuration'
  | PROCEDURE     = 'procedure'
  | FUNCTION      = 'function'
  | PACKAGE       = 'package'
  | TYPE          = 'type'
  | SUBTYPE       = 'subtype'
  | CONSTANT      = 'constant'
  | SIGNAL        = 'signal'
  | VARIABLE      = 'variable'
  | COMPONENT     = 'component'
  | LABEL         = 'label'
  | LITERAL       = 'literal'
  | UNITS         = 'units'
  | GROUP         = 'group'
  | FILE          = 'file'
  | NATURE        = 'nature'
  | SUBNATURE     = 'subnature'
  | QUANTITY      = 'quantity'
  | TERMINAL      = 'terminal'
;

Designator:
    Identifier
  | STRING
;

Identifier:
    ID
  | EXTENDED_IDENTIFIER
;

QualifiedNameWithWildcard:
    QualifiedName '.all'?
;

QualifiedName:
	ID ('.' ID)*
; 

terminal ABSTRACT_LITERAL: 
  INTEGER_FRAGMENT (
    ( "." INTEGER_FRAGMENT )? 
      | "#" BASED_INTEGER_FRAGMENT ( "." BASED_INTEGER_FRAGMENT )? "#"
    ) ( EXPONENT_FRAGMENT )?
;

terminal BIT_STRING_LITERAL: ( INTEGER_FRAGMENT )? BASE_SPECIFIER_FRAGMENT STRING;

terminal ID:
  '^'?LETTER_FRAGMENT ( '_' | LETTER_OR_DIGIT_FRAGMENT )*
;

terminal EXTENDED_IDENTIFIER: 
  '\\' ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\' | '\r' | '\n') )+ '\\'
;

terminal STRING : 
  '"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\' | '"' | '\r' | '\n') )* '"';

terminal CHAR:
    "'a'" | "'b'" | "'c'"  | "'d'" | "'e'" | "'f'" | "'g'" | "'h'" | "'i'" 
  | "'j'" | "'k'" | "'l'"  | "'m'" | "'n'" | "'o'" | "'p'" | "'q'" | "'r'" 
  | "'s'" | "'t'" | "'u'"  | "'v'" | "'w'" | "'x'" | "'y'" | "'z'" | "'A'" 
  | "'B'" | "'C'" | "'D'"  | "'E'" | "'F'" | "'G'" | "'H'" | "'I'" | "'J'" 
  | "'K'" | "'L'" | "'M'"  | "'N'" | "'O'" | "'P'" | "'Q'" | "'R'" | "'S'" 
  | "'T'" | "'U'" | "'V'"  | "'W'" | "'X'" | "'Y'" | "'Z'" | "'0'" | "'1'"
  | "'2'" | "'3'" | "'4'"  | "'5'" | "'6'" | "'7'" | "'8'" | "'9'" | "'&'" 
  | "'''" | "'('" | "')'"  | "'+'" | "','" | "'-'" | "'.'" | "'/'" | "':'" 
  | "';'" | "'<'" | "'='"  | "'>'" | "'|'" | "' '" | "'#'" | "'['" | "']'" 
  | "'_'" | "'*'" | "'\"'" | "'!'" | "'$'" | "'%'" | "'@'" | "'?'" | "'^'" 
  | "'`'" | "'{'" | "'}'"  | "'~'" | "' '" | "'¡'" | "'¢'" | "'£'" | "'€'"
  | "'¥'" | "'Š'" | "'§'"  | "'š'" | "'©'" | "'ª'" | "'«'" | "'¬'" | "''" 
  | "'®'" | "'¯'" | "'°'"  | "'±'" | "'²'" | "'³'" | "'Ž'" | "'µ'" | "'¶'"
  | "'·'" | "'ž'" | "'¹'"  | "'º'" | "'»'" | "'Œ'" | "'œ'" | "'Ÿ'" | "'¿'"
  | "'À'" | "'Á'" | "'Â'"  | "'Ã'" | "'Ä'" | "'Å'" | "'Æ'" | "'Ç'" | "'È'" 
  | "'É'" | "'Ê'" | "'Ë'"  | "'Ì'" | "'Í'" | "'Î'" | "'Ï'" | "'Ð'" | "'Ñ'"
  | "'Ò'" | "'Ó'" | "'Ô'"  | "'Õ'" | "'Ö'" | "'×'" | "'Ø'" | "'Ù'" | "'Ú'" 
  | "'Û'" | "'Ü'" | "'Ý'"  | "'Þ'" | "'ß'" | "'à'" | "'á'" | "'â'" | "'ã'" 
  | "'ä'" | "'å'" | "'æ'"  | "'ç'" | "'è'" | "'é'" | "'ê'" | "'ë'" | "'ì'"
  | "'í'" | "'î'" | "'ï'"  | "'ð'" | "'ñ'" | "'ò'" | "'ó'" | "'ô'" | "'õ'"
  | "'ö'" | "'÷'" | "'ø'"  | "'ù'" | "'ú'" | "'û'" | "'ü'" | "'ý'" | "'þ'" 
  | "'ÿ'"
;

terminal ATTRIBUTE:
  "'"LETTER_FRAGMENT ( '_' | LETTER_OR_DIGIT_FRAGMENT )*
;

terminal SL_COMMENT: '--' !('\n'|'\r')* ('\r'? '\n')? ;
terminal WS: (' ' | '\t' | '\r' | '\n')+;

terminal fragment BASED_INTEGER_FRAGMENT: 
  LETTER_OR_DIGIT_FRAGMENT ( '_' | LETTER_OR_DIGIT_FRAGMENT )*
;

terminal fragment LETTER_OR_DIGIT_FRAGMENT: LETTER_FRAGMENT | DIGIT_FRAGMENT;

terminal fragment LETTER_FRAGMENT:
    ('a'..'z' )| ('A'..'Z')
;

terminal fragment BASE_SPECIFIER_FRAGMENT: 
    "B"
  | "O"
  | "X"
  | "UB"
  | "UO"
  | "UX"
  | "SB"
  | "SO"
  | "SX"
  | "D"
  | "b"
  | "o"
  | "x"
  | "ub"
  | "uo"
  | "ux"
  | "sb"
  | "so"
  | "sx"
  | "d"
;

terminal fragment EXPONENT_FRAGMENT:
  ("E" | "e") ( "+" | "-" )? INTEGER_FRAGMENT
;

terminal fragment INTEGER_FRAGMENT: 
  DIGIT_FRAGMENT ( '_' | DIGIT_FRAGMENT )*
;

terminal fragment DIGIT_FRAGMENT: '0'..'9';
