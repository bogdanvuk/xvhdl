grammar rs.demsys.vhdl.Vhdl hidden(WS, SL_COMMENT) 

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate vhdl "http://www.demsys.rs/vhdl/Vhdl"

DesignFile :
	(ContextItems+=ContextItem)*
	LibraryUnits+=LibraryUnit*
//	;
;

UseClause
  : //'use' importedNamespace+=VhdlName ( ',' importedNamespace+=VhdlName )* ';'
  'use' importedNamespace = QualifiedNameWithWildcard ';'
//  'use' (lib=Library) '.' importedNamespace = QualifiedNameWithWildcard ';'
  ;
//
//Library:
//	custom_lib=[LibraryClause]
//	| builtin_lib=BuiltinLibs
//;
//
LibraryClause
  : /* 'library' library_names+=IDENTIFIER (',' library_names+=IDENTIFIER)* ';' */
  	'library' name=ID ';'
  ;
//  
//enum BuiltinLibs:
//	WORK='work'
//;

ContextItem
  : LibraryClause
  | UseClause
  ;

LibraryUnit:
	Entity
	| Architecture
	| Package
;


Package
  : "package" name = ID "is"
    //package_declarative_part=package_declarative_part
    (package_declarative_item+=package_declarative_item )*
    "end" ( "package" )? (ID)? ";"
  ;

package_declarative_item
  : 
	SignalDeclaration
  | AttributeDeclaration
//    SubprogramDeclaration
  | Type
//  | SubtypeDeclaration
  | ConstantDeclaration
//  | SignalDeclaration
  | VariableDeclaration
//  | FileDeclaration
//  | AliasDeclaration
  | Component
  ;

package_declarative_part
  : ( package_declarative_item+=package_declarative_item )*
  ;


/*
 * architecture identifier of entity_name is
 *    [ declarations]
 * begin -- optional
 *    [ statements]
 * end architecture identifier ;  
 */
Architecture returns Architecture:
  'architecture' name = ID 'of' entity=[Entity|QualifiedName] 'is'
    ( declaration += BlockDeclarativeItem )*
  'begin'
    ( statement += ArchitectureStatement )*
  'end' ( 'architecture' )? ( Identifier )? ';'
;

Entity: 
  'entity' name = ID 'is' 
      ( generics = Generics )?
      ( ports = Ports )?
//      ( declaration += EntityDeclarativeItem )*
    ( 'begin' 
//      ( statement += EntityStatement )*
    )?
    'end' ( 'entity' )? ( ID )? ';'
;

Ports: 
  'port' '(' declaration += Port ( ';' declaration += Port)* ')' ';'
;

Port:
  ('signal')? name = ID ':' ( mode = Mode )?
  type = SubtypeIndication ( kind = SignalKind )?  
  ( ':=' initial = Expression )?
;

Generics: 
  'generic' '(' declaration += Generic ( ';' declaration += Generic)* ')' ';'
;

Generic:
   ( 'constant' )?  name = ID ':' ( 'in' )?
   type = SubtypeIndication  ( ':=' initial = Expression )?
;


//InterfaceVariableDeclaration:
//  ( 'variable' )? name = ID ':' ( mode = Mode )?
//   type = SubtypeIndication  ( ':=' initial = Expression )?
//;
//
//InterfaceConstantDeclaration:
//  ( 'constant' )?  name = ID ':' ( 'in' )?
//   type = SubtypeIndication  ( ':=' initial = Expression )?
//;

BlockDeclarativeItem:
	SignalDeclaration
//    SubprogramDeclaration
  | Type
//  | SubtypeDeclaration
  | ConstantDeclaration
//  | SignalDeclaration
  | VariableDeclaration
//  | FileDeclaration
  | Alias
  | Component
  | AttributeDeclaration
//  | AttributeSpecification
//  | ConfigurationSpecification
//  | DisconnectionSpecification
//  | LimitDeclaration
//  | UseClauseDeclaration
//  | GroupTemplateDeclaration
//  | GroupDeclaration
//  | NatureDeclaration
//  | SubnatureDeclaration
//  | QuantityDeclaration
//  | TerminalDeclaration
;

Alias:
  'alias' name = ID ( ':' alias = SubtypeIndication )? 'is'
    is = MemberExpression ';'
;

SignalDeclaration:
  'signal' sig+=Signal (',' sig+=Signal)* ':'
  type = SubtypeIndication ( kind = SignalKind )?  ( ':=' initial = Expression )? ';'
;

Signal:
	name=ID
;

VariableDeclaration:
  ( ( shared ?= 'shared' ) )? 'variable' var+=Var (',' var+=Var)* 
    ':' type = SubtypeIndication ( ':=' initial = Expression )? ';'
;

Var:
	name=ID
;

ConstantDeclaration:
  'constant' constant+=Constant (',' constant+=Constant)* ':' type = SubtypeIndication
    ( ':=' initial = Expression )? ';'
;

Constant:
	name=ID
;


/*
 * attribute identifier : type_mark ;
 */
AttributeDeclaration:
  'attribute' name = ID (
	  	  (=> 'of' entity=ID ':' class = EntityClass 'is' is=Expression ';')
	  	| (':'  (type_id = ID | type_keyword = BuiltinTypes) ';')
  	)
;

/*
 * attribute_specification = "attribute" attribute_designator "of" entity_specification "is" expression ";"
 *  entity_specification = entity_name_list ":" entity_class
 */
//AttributeSpecification :
//  'attribute' name = ID 'of' entity=ID ':' class = EntityClass 'is' is=Expression ';' 
//  //entity = [Entity] ':' class = EntityClass 'is' is = Expression ';'
//;

/*
 * component component_name is
 *    generic ( generic_variable_declarations ) ; -- optional
 *    port ( input_and_output_variable_declarations ) ;
 * end component component_name ;
 */
Component returns Component:
  'component' name = ID ( 'is' )?
    ( generic = Generics )?
    ( port = Ports )?
  'end' 'component' ( Identifier )? ';'
;

ArchitectureStatement: 
    ProcessStatement
//  | ConfigurationInstantiationStatement
//  | BlockStatement
//  | ConcurrentAssertionStatement
//  | SimultaneousProceduralStatement
//  | SimultaneousCaseStatement
//  | SimultaneousIfStatement
//  | ConcurrentBreakStatement
  | EntityInstantiationStatement
//  | SelectedSignalAssignmentStatement
  | ComponentInstantiationStatement
  | ForGenerateStatement
  | IfGenerateStatement
  | ConditionalSignalAssignmentStatement
//  | SimpleSimultaneousStatement
//  | ConcurrentProcedureCallStatement
;

/*
 * label : process [ ( sensitivity_list ) ] [ is ]
 *            [ process_declarative_items ]
 *         begin
 *            sequential statements
 *         end process [ label ] ;
 */
ProcessStatement:
    ( label = ID ':' )? ( postponed ?= 'postponed' )? 
    'process'
      ( '(' sensitivity = IdList ')' )? 
      ( 'is' )?
      ( declaration += ProcessDeclarativeItem )*
    'begin'
      ( statement += SequentialStatement )* 
    'end' ( 'postponed' )? 'process' ( Identifier )? ';'
;

ProcessDeclarativeItem:
//    SubprogramDeclaration
   TypeDeclaration
  | SubtypeDeclaration
  | ConstantDeclaration
  | VariableDeclaration
//  | FileDeclaration
  | Alias
  | AttributeDeclaration
//  | AttributeSpecification
//  | UseClauseDeclaration
//  | GroupTemplateDeclaration
//  | GroupDeclaration
;

/*
 * part_name: entity  library_name.entity_name(architecture_name)
 *            port map ( actual arguments ) ; 
 *
 *            optional (architecture_name)
 * part_name: component_name
 *            port map ( actual arguments ) ;
 */
ComponentInstantiationStatement:
  name = ID ':' ( 'component' )? component=[Component|QualifiedName]
  ( genericMap = GenericMap )? 
  ( portMap = PortMap )? ';'
;

EntityInstantiationStatement:
//  label = ID ':' 'entity' (lib=Library '.')? name = QualifiedName ('(' ID ')')? 
  name=ID ':' 'entity' entity = [Entity|QualifiedName] ('(' ID ')')?
  ( genericMap = GenericMap )? 
  ( portMap = PortMap )? ';'
;


PortMap:
	'port' 'map' '('
		association+=PortMapAssociation (',' association+=PortMapAssociation)*
	')'
;

PortMapAssociation:
	formal=PortMapAssociationFormal '=>' actual=Expression
;

PortMapAssociationFormal:
	exp=SliceExpression
;


GenericMap:
	'generic' 'map' '('
		association+=GenericMapAssociation (',' association+=GenericMapAssociation)*
	')'
;

GenericMapAssociation:
	formal=ID '=>' actual=Expression
;


/*
 * [ label : ] [ postponed ] conditional_signal_assignment_statement ;
 *
 * target <= waveform when choice; -- choice is a boolean expression
 * target <= waveform when choice else waveform;
 */
ConditionalSignalAssignmentStatement:
  ( label = ID ':' )? ( postponed ?= 'postponed' )?
   target = MemberExpression '<=' ( guarded ?= 'guarded' )? //( delay = DelayMechanism )? 
   waveform += ConditionalWaveform (=> 'else' waveform += ConditionalWaveform)* ';'
;

ConditionalWaveform returns Expression:
  Waveforms ({ConditionalWaveformExpression.expression=current} 'when' choice = Expression)?
;
//
//Waveforms returns Expression:
//  Waveform ( {MultiExpression.expression+=current} (',' expression += Waveform )+ )?
//;

Waveforms returns Expression:
  waveform+=Waveform (',' waveform += Waveform )*
;


/*
 * value_expression [ after time_expression ]
 */
Waveform returns Expression: 
  exp=Expression ('after' after = Expression )?
;

/*
 * label: for variable in range generate    -- label required
 *            block declarative items  \__ optional   
 *         begin                       /
 *            concurrent statements          -- using variable
 *         end generate label ;
 *
 *  label: if condition generate            -- label required
 *            block declarative items  \__ optional   
 *         begin                       /
 *            concurrent statements
 *         end generate label ;
 */
ForGenerateStatement:
  label = ID ':' 'for' var=LoopVariable 'in' range=Expression
    'generate'
      ( ( declaration += BlockDeclarativeItem )* 'begin' )?
      ( statement += ArchitectureStatement )*
    'end' 'generate' ( ID )? ';'
;

IfGenerateStatement:
  label = ID ':' 'if' condition = Expression
    'generate'
      ( ( declaration += BlockDeclarativeItem )* 'begin' )?
      ( statement += ArchitectureStatement )*
    'end' 'generate' ( ID )? ';'
;

SequentialStatement:
    WaitStatement
//  | AssertionStatement
//  | ReportStatement
  | IfStatement
  | CaseStatement
  | LoopStatement
//  | NextStatement
//  | ExitStatement
//  | ReturnStatement
//  | NullStatement
//  | BreakStatement
//  | ProcedureCallStatement
//  | VariableAssignmentStatement
  | SequentialSignalAssignmentStatement
;

WaitStatement:
    ( label = Identifier ':' )? 'wait' ( 'on' sensitivity = IdList )? 
    ( 'until' until = Expression )? ( 'for' time = Expression )? ';'
;

/*
 * [ label: ] if  condition1  then
 *                 sequence-of-statements
 *             elsif  condition2  then      \_ optional
 *                  sequence-of-statements  /
 *             elsif  condition3  then      \_ optional
 *                  sequence-of-statements  /
 *             ...
 * 
 *             else                         \_ optional
 *                  sequence-of-statements  /
 *             end if [ label ] ;
 */
IfStatement:
    ( label = ID ':' )? 'if' test += IfStatementTest
    ( 'elsif' test += IfStatementTest )* 
    ( 'else' ( statement += SequentialStatement )* )?
    'end' 'if' ( ID )? ';'
;

IfStatementTest: 
  condition = Expression 'then' ( statement += SequentialStatement )*
;

/*
 * [ label: ] case  expression  is
 *              when choice1 =>
 *                 sequence-of-statements
 *              when choice2 =>            \_ optional
 *                 sequence-of-statements  /
 *              ...
 *
 *              when others =>             \_ optional if all choices covered
 *                 sequence-of-statements  /
 *            end case [ label ] ;
 */
CaseStatement:
  ( label = ID ':' )? 'case' case = Expression 'is'
      ( when += CaseAlternative )+
    'end' 'case' (ID)? ';'
;

CaseAlternative:
  'when' choice = ChoiceExpression (=> '=>') (statement += SequentialStatement )*
;

/*
 * [ label: ] loop
 *                  sequence-of-statements -- use exit statement to get out
 *             end loop [ label ] ;
 * 
 *  [ label: ] for variable in range loop
 *                  sequence-of-statements
 *             end loop [ label ] ;
 * 
 *  [ label: ] while  condition  loop
 *                  sequence-of-statements
 *             end loop [ label ] ;
 */
//LoopStatement:
//    ( label = Identifier ':' )? ( iteration = IterationScheme )?
//    'loop'
//    ( statement += SequentialStatement )* 
//    'end' 'loop' ( Identifier )? ';'
//  ;

LoopVariable:
	name=ID
;

LoopStatement
  : 'for' var=LoopVariable 'in' range=Expression
    'loop'
    statements+=SequentialStatement* 
    'end' 'loop' ID? ';'
  ;

  
/*
 * sequential signal assignment statement
 *
 * [ label : ] target "<=" [ "guarded" ] [ delay_mechanism ] waveform ";".
 */
SequentialSignalAssignmentStatement :
  ( label = ID ':' )? ( postponed ?= 'postponed' )?
  target = MemberExpression ('<=' | ':=') ( guarded ?= 'guarded' )?// ( delay = DelayMechanism )? 
   waveform = Waveforms 
   ';'
;

///*
// * [ label: ] target := expression ;
// */
//VariableAssignmentStatement:
//   ( label = ID ':' )? target = MemberExpression => ':=' initial = Expression ';'
//;

IterationScheme:
    WhileIterationScheme
  | ForIterationScheme
;

WhileIterationScheme:
  'while' condition = Expression
;

ForIterationScheme:
  'for' variable = Identifier 'in' in = DiscreteRange
;

Range returns Expression:
  SimpleExpression ({RangeExpression.left=current} direction = RangeDirection right = SimpleExpression)? 
;

/*
 * discrete_range = discrete_subtype_indication
 *	              | range
 */
DiscreteRange returns Expression:
//    SubtypeIndication
//  | Range
	Range
;

//RangeSpecification:
//  left = SimpleExpression direction = RangeDirection right = SimpleExpression
//;

SubtypeIndication
  : CustomSubtype |
  	BuiltinSubtype
;
  
CustomSubtype:
	type=[Type|QualifiedName] (constraint=Constraint)?
;

BuiltinSubtype:
	type=BuiltinTypes (constraint=Constraint)?
;
 
Type:
	SubtypeDeclaration
	| TypeDeclaration
;

SubtypeDeclaration:
  'subtype' name = ID 'is' type = SubtypeIndication ';'
;

TypeDeclaration:
    'type' name = ID ( 'is' definition = TypeDefinition )? ';'
;

TypeDefinition:
    EnumerationTypeDefinition
  | UnconstrainedArrayTypeDefinition
  | ConstrainedArrayTypeDefinition
  | RecordTypeDefinition
  | AccessTypeDefinition
  | FileTypeDefinition
//  | PhysicalTypeDefinition
//  | RangeTypeDefinition
;

AccessTypeDefinition:
  'access' type = SubtypeIndication
;

UnconstrainedArrayTypeDefinition:
    'array' '(' 
        index += ID 'range' '<>' ( ',' index += ID 'range' '<>' )* 
    ')' 'of' type = SubtypeIndication
;

ConstrainedArrayTypeDefinition:
    'array' constraint = IndexConstraint 'of' type = SubtypeIndication
;

EnumerationLiteral:
	name = (ID | CHAR)
;

EnumerationTypeDefinition:
    '(' literal += EnumerationLiteral 
    ( ',' literal += EnumerationLiteral )* ')'
;

FileTypeDefinition:
    'file' 'of' type = ID
;

RecordField:
	name=ID
;

RecordTypeDefinition:
    'record' 
       ( field += RecordField (',' field+=RecordField)* ':' type += SubtypeIndication ';' )+
    'end' 'record' ( Identifier )?
;

//RangeTypeDefinition:
//   'range' left = SimpleExpression direction = RangeDirection right = SimpleExpression
// | 'range' '<>'
//;

enum BuiltinTypes returns EString:
    STD_LOGIC="std_logic"
    | STD_ULOGIC="std_ulogic"
    | STD_ULOGIC_VECTOR="std_ulogic_vector"
    | STD_LOGIC_VECTOR="std_logic_vector"
    | BIT="bit"
    | REAL="real"
    | BIT_VECTOR="bit_vector"
    | INTEGER="integer"
    | POSITIVE="positive"
    | NEGATIVE="negative"
    | BOOLEAN="boolean"
    | NATURAL="natural"
    | UNSIGNED="unsigned"
    | STRING = "string"
    | TO_X01 = "TO_X01"
    | CONV_STD_LOGIC_VECTOR="conv_std_logic_vector"
;

Constraint returns Expression:
    RangeConstraint
  | IndexConstraint
;

RangeConstraint returns Expression:
  'range' RangeExpression
;

IndexConstraint returns Expression:
   '(' RangeExpression ({MultiExpression.expression+=current} (',' expression += RangeExpression )+ )? ')'
;

Expression:
	LogicalExpression
;

LogicalExpression returns Expression:
  Relation ({LogicalExpression.left=current} operator=LogicalOperator right=Relation)*
;

Relation returns Expression:
  ChoiceExpression ({RelationalExpression.left=current} operator = RelationalOperator right = ChoiceExpression)*
;

ChoiceExpression returns Expression:
	RangeExpression ({ChoiceExpression.left=current} '|' right = RangeExpression)*
;

RangeExpression returns Expression:
	ShiftExpression ({RangeExpression.left=current} operator = RangeDirection right = ShiftExpression)*
;

ShiftExpression returns Expression: 
  SimpleExpression ({ShiftExpression.left=current} operator=ShiftOperator right=SimpleExpression)*
;
SimpleExpression returns Expression: 
    TermExpression ({AddingExpression.left=current} operator = AddingOperator right = TermExpression)*
//  | SignTermExpression ({AddingExpression.left=current} operator = AddingOperator right = TermExpression)*
;
//
//SignTermExpression returns Expression:
//  SignFactor ({MultiplyingExpression.left=current} operator = MultiplyingOperator right = Factor)*
//;
//
TermExpression returns Expression:
  Factor ({MultiplyingExpression.left=current} operator = MultiplyingOperator right = Factor)*
;

Factor returns Expression: 
    AttributeExpression ({Factor.left=current} '**' right = AttributeExpression) ?
  | UnaryExpression
;

UnaryExpression returns Expression:
  unary_operator = UnaryOperator expression = AttributeExpression
;


AttributeExpression returns Expression:
	MemberExpression
	(attribute+=ATTRIBUTE)?
;

MemberExpression returns Expression: 
    SliceExpression ({MemberExpression.receiver=current} '.' member=[RecordField]
	('(' slice+=Expression (',' slice+=Expression)* ')')* )*
;

SliceExpression returns Expression:
	AtomicExpression
	({SliceExpression.left=current} ('(' slice+=Expression (',' slice+=Expression)* ')')+)?
;

Parameter:
	Expression
	({Parameter.left=current} '=>' target=Expression)?
;

Aggregate returns Expression:
	'(' param+=Parameter (',' param+=Parameter)* ')'
;

AtomicExpression returns Expression:
	{VariableRef} value=[Variable] |
	{Value} value=ValueExpression |
	{Type} value=BuiltinTypes |
	{BuiltinFuncs} value=BuiltinFuncs |
	{Boolean} value = ('true' | 'false') |
	{String} value=STRING |
	{Char} value=CHAR |
	{BitString} value=BIT_STRING_LITERAL |
	{Others} value='others' |
	{Open}  value='open' |
	Aggregate
//	'(' Expression ')'
;

Variable:
	Signal |
	Var |
	Constant |
	Port |
	LoopVariable |
	Generic |
	Alias |
	EnumerationLiteral
;

IdList:
	id+=MemberExpression (',' id+=MemberExpression)*
;

//Aggregate:
//	'(' exp+=Association (',' exp+=Association)* ')'
//;
//
//Association:
//	(formal=Expression '=>')? actual=Expression
//;

enum BuiltinFuncs returns EString:
	  TO_UNSIGNED='to_unsigned'
	| RISING_EDGE='rising_edge'
	| FALLING_EDGE='falling_edge'
;

enum SignalKind :
    REGISTER = 'register' 
  | BUS      = 'bus'
;

enum RangeDirection :
    TO     = 'to'
  | DOWNTO = 'downto'
;

enum Mode :
    IN      = 'in'
  | OUT     = 'out'
  | INOUT   = 'inout'
  | BUFFER  = 'buffer'
  | LINKAGE = 'linkage'
;

enum UnaryOperator :
    ABS = 'abs'
  | NOT = 'not'
;

enum MultiplyingOperator :
    MUL = '*'
  | DIV = '/'
  | MOD = 'mod'
  | REM = 'rem'
;

enum ShiftOperator :
    SLL = 'sll'
  | SRL = 'srl'
  | SLA = 'sla'
  | SRA = 'sra'
  | ROL = 'rol'
  | ROR = 'ror'
;

enum RelationalOperator :
    EQ          = '='
  | NEQ         = '/='
  | LOWERTHAN   = '<'
  | LE          = '<='
  | GREATERTHAN = '>'
  | GE          = '>='
//  | ASSOCIATE   = '=>'
;

enum LogicalOperator :
    AND  = 'and'
  | OR   = 'or'
  | NAND = 'nand'
  | NOR  = 'nor'
  | XOR  = 'xor'
  | XNOR = 'xnor'
;

enum AddingOperator :
    PLUS      = '+'
  | MINUS     = '-'
  | AMPERSAND = '&'
;

enum Sign :
    PLUS  = '+'
  | MINUS = '-'
;

enum Purity :
    PURE   = 'pure'
  | IMPURE = 'impure'
;

enum EntityClass :
    ENTITY        = 'entity'
  | ARCHITECTURE  = 'architecture'
  | CONFIGURATION = 'configuration'
  | PROCEDURE     = 'procedure'
  | FUNCTION      = 'function'
  | PACKAGE       = 'package'
  | TYPE          = 'type'
  | SUBTYPE       = 'subtype'
  | CONSTANT      = 'constant'
  | SIGNAL        = 'signal'
  | VARIABLE      = 'variable'
  | COMPONENT     = 'component'
  | LABEL         = 'label'
  | LITERAL       = 'literal'
  | UNITS         = 'units'
  | GROUP         = 'group'
  | FILE          = 'file'
  | NATURE        = 'nature'
  | SUBNATURE     = 'subnature'
  | QUANTITY      = 'quantity'
  | TERMINAL      = 'terminal'
;

Designator:
    Identifier
  | STRING
;

Identifier:
    ID
  | EXTENDED_IDENTIFIER
;

QualifiedNameWithWildcard hidden():
    QualifiedName ('.' 'all')?
;

QualifiedName:
	ID ('.' ID)*
; 

ValueExpression: 
    {UnitValueExpression} value = ABSTRACT_LITERAL unit = ID
  | {ValueExpression} value = ABSTRACT_LITERAL
;

terminal ABSTRACT_LITERAL: 
  INTEGER_FRAGMENT (
    ( "." INTEGER_FRAGMENT )? 
      | "#" BASED_INTEGER_FRAGMENT ( "." BASED_INTEGER_FRAGMENT )? "#"
    ) ( EXPONENT_FRAGMENT )?
;

terminal BIT_STRING_LITERAL: ( INTEGER_FRAGMENT )? BASE_SPECIFIER_FRAGMENT STRING;

terminal ID:
  '^'?LETTER_FRAGMENT ( '_' | LETTER_OR_DIGIT_FRAGMENT )*
;

terminal EXTENDED_IDENTIFIER: 
  '\\' ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\' | '\r' | '\n') )+ '\\'
;

terminal STRING : 
  '"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\' | '"' | '\r' | '\n') )* '"';

terminal CHAR:
    "'a'" | "'b'" | "'c'"  | "'d'" | "'e'" | "'f'" | "'g'" | "'h'" | "'i'" 
  | "'j'" | "'k'" | "'l'"  | "'m'" | "'n'" | "'o'" | "'p'" | "'q'" | "'r'" 
  | "'s'" | "'t'" | "'u'"  | "'v'" | "'w'" | "'x'" | "'y'" | "'z'" | "'A'" 
  | "'B'" | "'C'" | "'D'"  | "'E'" | "'F'" | "'G'" | "'H'" | "'I'" | "'J'" 
  | "'K'" | "'L'" | "'M'"  | "'N'" | "'O'" | "'P'" | "'Q'" | "'R'" | "'S'" 
  | "'T'" | "'U'" | "'V'"  | "'W'" | "'X'" | "'Y'" | "'Z'" | "'0'" | "'1'"
  | "'2'" | "'3'" | "'4'"  | "'5'" | "'6'" | "'7'" | "'8'" | "'9'" | "'&'" 
  | "'''" | "'('" | "')'"  | "'+'" | "','" | "'-'" | "'.'" | "'/'" | "':'" 
  | "';'" | "'<'" | "'='"  | "'>'" | "'|'" | "' '" | "'#'" | "'['" | "']'" 
  | "'_'" | "'*'" | "'\"'" | "'!'" | "'$'" | "'%'" | "'@'" | "'?'" | "'^'" 
  | "'`'" | "'{'" | "'}'"  | "'~'" | "' '" | "'¡'" | "'¢'" | "'£'" | "'€'"
  | "'¥'" | "'Š'" | "'§'"  | "'š'" | "'©'" | "'ª'" | "'«'" | "'¬'" | "''" 
  | "'®'" | "'¯'" | "'°'"  | "'±'" | "'²'" | "'³'" | "'Ž'" | "'µ'" | "'¶'"
  | "'·'" | "'ž'" | "'¹'"  | "'º'" | "'»'" | "'Œ'" | "'œ'" | "'Ÿ'" | "'¿'"
  | "'À'" | "'Á'" | "'Â'"  | "'Ã'" | "'Ä'" | "'Å'" | "'Æ'" | "'Ç'" | "'È'" 
  | "'É'" | "'Ê'" | "'Ë'"  | "'Ì'" | "'Í'" | "'Î'" | "'Ï'" | "'Ð'" | "'Ñ'"
  | "'Ò'" | "'Ó'" | "'Ô'"  | "'Õ'" | "'Ö'" | "'×'" | "'Ø'" | "'Ù'" | "'Ú'" 
  | "'Û'" | "'Ü'" | "'Ý'"  | "'Þ'" | "'ß'" | "'à'" | "'á'" | "'â'" | "'ã'" 
  | "'ä'" | "'å'" | "'æ'"  | "'ç'" | "'è'" | "'é'" | "'ê'" | "'ë'" | "'ì'"
  | "'í'" | "'î'" | "'ï'"  | "'ð'" | "'ñ'" | "'ò'" | "'ó'" | "'ô'" | "'õ'"
  | "'ö'" | "'÷'" | "'ø'"  | "'ù'" | "'ú'" | "'û'" | "'ü'" | "'ý'" | "'þ'" 
  | "'ÿ'"
;

terminal ATTRIBUTE:
  "'"LETTER_FRAGMENT ( '_' | LETTER_OR_DIGIT_FRAGMENT )*
;

terminal SL_COMMENT: '--' !('\n'|'\r')* ('\r'? '\n')? ;
terminal WS: (' ' | '\t' | '\r' | '\n')+;

terminal fragment BASED_INTEGER_FRAGMENT: 
  LETTER_OR_DIGIT_FRAGMENT ( '_' | LETTER_OR_DIGIT_FRAGMENT )*
;

terminal fragment LETTER_OR_DIGIT_FRAGMENT: LETTER_FRAGMENT | DIGIT_FRAGMENT;

terminal fragment LETTER_FRAGMENT:
    ('a'..'z' )| ('A'..'Z')
;

terminal fragment BASE_SPECIFIER_FRAGMENT: 
    "B"
  | "O"
  | "X"
  | "UB"
  | "UO"
  | "UX"
  | "SB"
  | "SO"
  | "SX"
  | "D"
  | "b"
  | "o"
  | "x"
  | "ub"
  | "uo"
  | "ux"
  | "sb"
  | "so"
  | "sx"
  | "d"
;

terminal fragment EXPONENT_FRAGMENT:
  ("E" | "e") ( "+" | "-" )? INTEGER_FRAGMENT
;

terminal fragment INTEGER_FRAGMENT: 
  DIGIT_FRAGMENT ( '_' | DIGIT_FRAGMENT )*
;

terminal fragment DIGIT_FRAGMENT: '0'..'9';
