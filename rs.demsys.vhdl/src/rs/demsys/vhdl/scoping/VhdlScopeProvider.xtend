/*
 * generated by Xtext
 */
package rs.demsys.vhdl.scoping

import org.eclipse.emf.ecore.EReference
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.scoping.Scopes
//import rs.demsys.vhdl.vhdl.Port
import rs.demsys.vhdl.vhdl.Signal
import java.util.ArrayList
//import rs.demsys.vhdl.vhdl.Architecture
import org.eclipse.xtext.scoping.impl.MultimapBasedScope
import org.eclipse.xtext.scoping.IScope
import rs.demsys.vhdl.vhdl.MemberExpression
import rs.demsys.vhdl.vhdl.Value
import rs.demsys.vhdl.vhdl.Variable

//import rs.demsys.vhdl.vhdl.LoopStatement

import rs.demsys.vhdl.vhdl.Architecture
import java.util.ArrayList
import org.eclipse.xtext.scoping.Scopes
import rs.demsys.vhdl.vhdl.Signal
import rs.demsys.vhdl.vhdl.LoopStatement

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 *
 */
 
import static extension org.eclipse.xtext.EcoreUtil2.*
import rs.demsys.vhdl.vhdl.SignalDeclaration
import rs.demsys.vhdl.vhdl.TypeDeclaration
import rs.demsys.vhdl.vhdl.RecordTypeDefinition
import rs.demsys.vhdl.vhdl.CustomSubtype
import rs.demsys.vhdl.vhdl.Port
import rs.demsys.vhdl.vhdl.SliceExpression
import rs.demsys.vhdl.vhdl.Expression
import rs.demsys.vhdl.vhdl.SubtypeIndication
import rs.demsys.vhdl.vhdl.ConstrainedArrayTypeDefinition
import rs.demsys.vhdl.vhdl.ProcessStatement
import java.util.List
import rs.demsys.vhdl.vhdl.Generic
import org.eclipse.xtext.scoping.impl.SimpleScope
import rs.demsys.vhdl.vhdl.EnumerationLiteral
import rs.demsys.vhdl.vhdl.EnumerationTypeDefinition
import org.eclipse.xtend.lib.macro.declaration.EnumerationTypeDeclaration
import rs.demsys.vhdl.vhdl.PortMapAssociation
import rs.demsys.vhdl.vhdl.VariableRef
import rs.demsys.vhdl.vhdl.PortMapAssociationFormal
import rs.demsys.vhdl.vhdl.Entity
import rs.demsys.vhdl.vhdl.EntityInstantiationStatement
import java.util.HashMap
import org.eclipse.xtext.scoping.impl.MapBasedScope
import rs.demsys.vhdl.vhdl.ComponentInstantiationStatement

class VhdlScopeProvider extends org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider {
	
	HashMap<String, IScope> test;
	
	var here1 = 0;
	var here2 = 0;
	var here3 = 0;
	var here4 = 0;
	var here5 = 0;
	var here6 = 0;
	var here7 = 0;
	var here8 = 0;
	
	new()
	{
		test = new HashMap<String, IScope>;
	}
	
	def dispatch SubtypeIndication getReceiverType(VariableRef e) {
		here1 += 1;
		System.out.println("Here1: " + here1.toString());
		var varType = (
		switch (e.value) {
				Signal: e.value.getContainerOfType(SignalDeclaration).type
				Port: (e.value as Port).type
			}
		)
		return varType
	}
	
	def dispatch SubtypeIndication getReceiverType(SliceExpression e) {
		here2 += 1;
		System.out.println("Here2: " + here2.toString());
		return getReceiverType(e.left)
	}
	
	def dispatch SubtypeIndication getReceiverType(MemberExpression e) {
		here3 += 1;
		System.out.println("Here3: " + here3.toString());
		return getReceiverType(e.receiver)
	}
//		if (e instanceof Variable) {
//			var rcv  = e as Variable
//			var varType = (
//			switch (rcv.value) {
//					Signal: rcv.value.getContainerOfType(SignalDeclaration).type
//					Port: (rcv.value as Port).type
//				}
//			)
//			return varType
//		} else if (e instanceof SliceExpression) {
//			var slice = e as SliceExpression
//			return getReceiverType(slice.left)
//		} else if (e instanceof MemberExpression) {
//			var member = e as MemberExpression
//			return getReceiverType(member.receiver)
//		} else {
//			return null
//		}
//	}

//	def dispatch RecordTypeDefinition getRecordDefinition(CustomSubtype subtype)
//	{
//		
//	}
//	
//	def dispatch RecordTypeDefinition getRecordDefinition(SubtypeIndication subtype)
//	{
//		
//	}
	
	def scope_RecordField(MemberExpression member, EReference r)
	{
		here4 += 1;
		System.out.println("Here4: " + here4.toString());
		var varType = getReceiverType(member.receiver)
		
		if (varType instanceof CustomSubtype)	{
			var typeDec = varType.type as TypeDeclaration
			
			if (typeDec.definition instanceof ConstrainedArrayTypeDefinition) {
				var arraySubtype = (typeDec.definition as ConstrainedArrayTypeDefinition).type
				
				if (arraySubtype instanceof CustomSubtype) {
					typeDec = arraySubtype.type as TypeDeclaration 
				}
			}
			
			if (typeDec.definition instanceof RecordTypeDefinition) {
				return Scopes::scopeFor((typeDec.definition as RecordTypeDefinition).field)	
			}
		}
	
		return IScope::NULLSCOPE
		
	}
	
	def scope_Variable(PortMapAssociationFormal formal, EReference r){
		var entity_inst = EcoreUtil2::getContainerOfType(formal, typeof(EntityInstantiationStatement))
		if (entity_inst != null) {
			return delegateGetScope(entity_inst.entity,r)
		} 
		
		var comp_inst = EcoreUtil2::getContainerOfType(formal, typeof(ComponentInstantiationStatement))
		if (comp_inst != null) {
			return delegateGetScope(comp_inst.component,r)
		}
		
		return IScope::NULLSCOPE
		
	}
	
	def scope_Variable(Architecture arch, EReference r)
//	def scope_VariableRef_value(Architecture arch, EReference r)
    {
    	here5 += 1;
    	if (here5 % 100 == 0) {
			System.out.println("Here5: " + here5.toString());
			System.out.println(arch.entity.name + '.' + arch.name);
		}
		
		var scope = delegateGetScope(arch, r)
		
		if (arch.entity.generics != null) {
			scope = Scopes::scopeFor(
						arch.entity.generics.declaration, 
						scope
					)
		}
		
		if (arch.entity.ports != null) {
			scope = Scopes::scopeFor(
					arch.entity.ports.declaration, 
					scope
				)
		}
		
		return scope

//    	var scope = test.get(arch.entity.name + '.' + arch.name) 
//    	
//    	if (scope == null) {
//	    	scope = new SimpleScope(
//				delegateGetScope(arch.entity,r),
//				delegateGetScope(arch,r).getAllElements()
//			)
//	    
//	    	here8 += 1;
//			System.out.println("Here6: " + here6.toString() + " arch: " + arch.entity.name + '.' + arch.name);	
//	    	test.put(arch.entity.name + '.' + arch.name, scope)
//	    }
//	    
//    	here5 += 1;
//    	if (here5 % 100 == 0) {
//			System.out.println("Here5: " + here5.toString());
//		}
//		
//		return scope
		
//    	Scopes::scopeFor(
//			EcoreUtil2.getAllContentsOfType(arch, typeof(EnumerationLiteral)),
//			MultimapBasedScope.createScope(
//				delegateGetScope(arch.entity, r), 
//				delegateGetScope(arch, r).getAllElements, 
//				false
//			)
//		)

//		val objScope = new ArrayList<EObject>();
//		
//		for (e : arch.declaration.filter(typeof(TypeDeclaration))) {
//			if (e.definition instanceof EnumerationTypeDefinition) {
//				objScope.addAll((e.definition as EnumerationTypeDefinition).literal)	
//			}
//			
//		}
//
//		Scopes::scopeFor(
//			objScope,
//			new SimpleScope(
//				delegateGetScope(arch.entity, r),
//				delegateGetScope(arch, r).getAllElements
//			)
//		)

		

//		MultimapBasedScope.createScope(
//				delegateGetScope(arch.entity, r), 
//				delegateGetScope(arch, r).getAllElements, 
//				false
//			)
//		Scopes::scopeFor(
//			arch.entity.ports.declaration, 
//			delegateGetScope(arch, r)
//		)
		
//				Scopes::scopeFor(
//			arch.entity.generics.declaration,
//			Scopes::scopeFor(
//				arch.entity.ports.declaration, 
//				delegateGetScope(arch, r)
//			)
//		)

//    	here5 += 1;
//		System.out.println("Here5: " + here5.toString());
//    	//val arch = EcoreUtil2.getContainerOfType(context, typeof(Architecture))
//    	
//        //DesignFile d = EcoreUtil2.getContainerOfType(context, DesignFile.class);
//        
////        val objScope = new ArrayList<EObject>();
////		val enums = EcoreUtil2.getAllContentsOfType(arch, typeof(EnumerationLiteral))
//		
////	      objScope.addAll(EcoreUtil2.getAllContentsOfType(arch.entity.ports, Port.class))
//		Scopes::scopeFor(
//			EcoreUtil2.getAllContentsOfType(arch, typeof(EnumerationLiteral)),
//			Scopes::scopeFor(
//				EcoreUtil2.getAllContentsOfType(arch.entity.generics, typeof(Generic)),
//				Scopes::scopeFor(
//					EcoreUtil2.getAllContentsOfType(arch.entity.ports, typeof(Port)),
//					delegateGetScope(arch, r)
//				)
//			)
//		)
        
//        if (arch.entity.ports != null) {
//            objScope.addAll(arch.entity.ports.declaration)
//        }
//        
//        if (arch.entity.generics != null) {
//        	objScope.addAll(arch.entity.generics.declaration)
//       	}
//        
//        MultimapBasedScope.createScope(Scopes::scopeFor(objScope), delegateGetScope(arch, r).getAllElements(), true)
       
//        return Scopes.scopeFor(objScope, delegateGetScope(arch, r));
        //return Scopes.scopeFor(objScope);
        /*
        ArrayList<EObject> objScope = new ArrayList<EObject>();
        
        for (DesignPackage designPackage : ((DesignFile) context.eContainer()).getPackages()) {
            objScope.addAll(designPackage.getDesignTypes());
        }
        
        IScope outerAttrs = Scopes.scopeFor(objScope);
        //IScope outerAttrs = getOuterAttrScope(context.getSuper());
        
        //return outerAttrs;
        
        return MultimapBasedScope.createScope(outerAttrs, delegateGetScope(context, r).getAllElements(), false);
        */
    }
    
    def scope_Variable(ProcessStatement proc, EReference r)
    {
//    	var qname = (proc.eContainer as Architecture).entity.name + '.' + (proc.eContainer as Architecture).name + proc.label
//    	var scope = test.get(qname) 
//    	
//    	if (scope == null) {
//			scope = MapBasedScope.createScope(
//				delegateGetScope(proc,r),
//				this.getScope(proc.eContainer, r).getAllElements()
//			)
//	    	test.put(qname, scope)
//	    }
    	
    	here6 += 1;
		System.out.println("Here6: " + here6.toString());
//    	MultimapBasedScope.createScope(this.getScope(proc.eContainer, r), delegateGetScope(proc,r).getAllElements(), true)

		Scopes::scopeFor(
			proc.declaration, 
			delegateGetScope(proc.eContainer, r)
		)

//		return scope
		
    }
//    
    def scope_Variable(LoopStatement loop, EReference r)
    {
    	here7 += 1;
		System.out.println("Here7: " + here7.toString());
    	val objScope = new ArrayList<EObject>();
       
        objScope.addAll(loop.getVar())
        
    	Scopes::scopeFor(
    		objScope,
    		this.getScope(loop.eContainer, r)
    	
    		)
    }
}